<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Algorithms March on through Continuous and Combinatorial Methods</AwardTitle>
<AwardEffectiveDate>06/01/2018</AwardEffectiveDate>
<AwardExpirationDate>05/31/2021</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This project will continue the exploration of the combination of continuous and combinatorial methods for algorithm design. Continuous methods are similar to high school calculus, where the notion of the derivative of a function is used to find exact, optimal solutions to problems such as the shortest way to swim across a moving creek. An example of a combinatorial method is multiplication, where one follows a simple step-by-step method (algorithm) to compute a product. In optimization, both techniques have been used to compute the optimal solutions for many problems. One such example is airline scheduling, which combines aspects of staff scheduling, route planning, and even profit maximization. Recently, a breakthrough in optimization has combined these approaches at a lower level. Combinatorial problems (e.g., scheduling staff) are translated to continuous ones (e.g., multi-variable real number function optimization). Combinatorial structure is re-imposed, based on understanding of the original problem, to speed up calculus-based methods. This has led to remarkable breakthroughs in producing theoretically fast algorithms for basic problems such as the solution of linear systems. Such algorithms are applicable, for example, in climate modelling, weather predictions, and oil exploration. The technique is also making exciting inroads into the area of linear programming, which is used, for example, in the previously mentioned application of airline scheduling.&lt;br/&gt;&lt;br/&gt;In this project, the idea of "pre-conditioning" a function is studied to allow for continuous ("calculus-based") optimization techniques to run faster. One example is producing an interpolation of a function on a line. The value of the function is specified at particular points, and one wishes to produce the "smoothest" interpolation on the many points on the line. This can be viewed as a multi-variable problem where the value of each point is a variable, but one loses the structure of the line. Re-incorporating this structure into the multi-variable optimization techniques produces very fast algorithms. This simple intuition has been applied to more complicated situations, ranging to very general problems in convex optimization, and is yielding fruit. This project will attempt to further understand and extend the applicability of these techniques.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>05/18/2018</MinAmdLetterDate>
<MaxAmdLetterDate>05/18/2018</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>1816861</AwardID>
<Investigator>
<FirstName>Satish</FirstName>
<LastName>Rao</LastName>
<EmailAddress>satishr@cs.berkeley.edu</EmailAddress>
<StartDate>05/18/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>7796</Code>
<Text>ALGORITHMIC FOUNDATIONS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
</Award>
</rootTag>
